rbind(wolves[[1]],wolves[[2]])
rm(list=ls())
library(sf)
#library(sp)
library(move)
library(osmdata)
library(mapview)
library(devtools)
library(units)
library(dplyr)
#devtools::install_github('jedalong/wildlifeHI')
#library(wildlifeHI)
devtools::load_all('D:/RPackages/wildlifeHI/wildlifeHI/')
# #Hebblewhite Alberta-BC Wolves (Movebank ID 209824313)
wolves <- move("D:/RPackages/wildlifeHI/Hebblewhite Alberta-BC Wolves.csv")
x_wolf <- hi_by_trackId(wolves[[1:10]],fun="hi_crossing")
?round
rm(list=ls())
library(sf)
#library(sp)
library(move)
library(osmdata)
library(mapview)
library(devtools)
library(units)
library(dplyr)
#devtools::install_github('jedalong/wildlifeHI')
#library(wildlifeHI)
devtools::load_all('D:/RPackages/wildlifeHI/wildlifeHI/')
# #Hebblewhite Alberta-BC Wolves (Movebank ID 209824313)
wolves <- move("D:/RPackages/wildlifeHI/Hebblewhite Alberta-BC Wolves.csv")
x_wolf <- hi_by_trackId(wolves[[1:10]],fun="hi_crossing")
table(x_wolf$crossing_value)
x_wolf_sf <- hi_by_trackId(wolves[[1:10]],fun="hi_crossing_loc",crs_code=32611)
rm(list=ls())
library(sf)
#library(sp)
library(move)
library(osmdata)
library(mapview)
library(devtools)
library(units)
library(dplyr)
#devtools::install_github('jedalong/wildlifeHI')
#library(wildlifeHI)
devtools::load_all('D:/RPackages/wildlifeHI/wildlifeHI/')
# data("fishers")
# # Save an object to a file
# saveRDS(fishers, file = "D://RPackages/MoveApps/hi_nearest_distance/data/raw/fishers.rds")
#Full Fishers dataset
#fishers <- move("D:/RPackages/wildlifeHI/Martes pennanti LaPoint New York.csv")
# saveRDS(fishers, file = "D://RPackages/MoveApps/hi_nearest_distance/data/raw/fishers.rds")
# #Hebblewhite Alberta-BC Wolves (Movebank ID 209824313)
wolves <- move("D:/RPackages/wildlifeHI/Hebblewhite Alberta-BC Wolves.csv")
# #wolves <- wolves[[1:14]]   #use only B*** individuals
# sa
x_wolf_sf <- hi_by_trackId(wolves[[1:10]],fun="hi_crossing_loc",crs_code=32611)
mapview(x_wolf_sf['trackId'])
table(x_wolf_sf$value)
road_sub <- subset(x_wolf_sf, value %in% c('primary','secondary','tertiary'))
mapview(road_sub'trackId'])
mapview(road_sub['trackId'])
road_sf <- hi_by_trackId(wolves,fun="hi_crossing_loc",crs_code=32611,
key='highway',value=c('primary','secondary'))
trackId(wolves)
move <- wolves[['B087']]
plot(move)
road_sf <- hi_by_trackId(wolves[[10:15]],fun="hi_crossing_loc",crs_code=32611,
key='highway',value=c('primary','secondary'))
move
trackId(mvoe)
trackId(move)
trackId(MoveStack(move))
trackId(moveStack(move))
tz <- attr(timestamps(move),'tzone')
#check input data type
if (class(move) != 'MoveStack'){
if (class(move) == 'Move'){
move <- moveStack(move, forceTz=tz) #fix this timestamp to correct time zone
} else {
print('Input Data not of class MoveStack. Returning NULL.')
return(NULL)
}
}
osmdata <- hi_get_osm(move,key='highway',value=c('primary','secondary'))
osmdata
#convert move to sf
sf_pt <- st_as_sf(move)
#grab projection of data
data_crs <- st_crs(move)
crs_code = 32611
#grab projection of data
data_crs <- st_crs(move)
osmdata <- st_transform(osmdata,crs=crs_code)
# Create linestrings
sf_ln <- internal_hi_move2line(move) |>
st_transform(crs=crs_code)
#get locations of crossings (lines/poly boundaries)
#Check reverse ordering if slow...
suppressWarnings(sf_int <- st_intersection(sf_ln,osmdata))
sf_int
mapview(sf_int)
rm(list=ls())
library(sf)
#library(sp)
library(move)
library(osmdata)
library(mapview)
library(devtools)
library(units)
library(dplyr)
#devtools::install_github('jedalong/wildlifeHI')
#library(wildlifeHI)
devtools::load_all('D:/RPackages/wildlifeHI/wildlifeHI/')
# data("fishers")
# # Save an object to a file
# saveRDS(fishers, file = "D://RPackages/MoveApps/hi_nearest_distance/data/raw/fishers.rds")
#Full Fishers dataset
#fishers <- move("D:/RPackages/wildlifeHI/Martes pennanti LaPoint New York.csv")
# saveRDS(fishers, file = "D://RPackages/MoveApps/hi_nearest_distance/data/raw/fishers.rds")
# #Hebblewhite Alberta-BC Wolves (Movebank ID 209824313)
wolves <- move("D:/RPackages/wildlifeHI/Hebblewhite Alberta-BC Wolves.csv")
# #wolves <- wolves[[1:14]]   #use only B*** individuals
# saveRDS(wolves, file = "D://RPackages/MoveApps/hi_nearest_distance/data/raw/wolves.rds")
#
road_sf <- hi_by_trackId(wolves[[10:15]],fun="hi_crossing_loc",crs_code=32611,
key='highway',value=c('primary','secondary'))
road_sf <- hi_by_trackId(wolves[[10:15]],fun="hi_crossing_loc",crs_code=32611,
key='highway',value=c('primary','secondary'))
move <- wolves[[14]]
a <- st_as_sf(move)
b <- rbind(a,NULL)
a <- hi_crossing_loc(wolves[[14]], crs_code=32611, key='highway',value=c('primary','secondary'))
a
b <- hi_crossing_loc(wolves[[15]], crs_code=32611, key='highway',value=c('primary','secondary'))
b
class(b)
d <- hi_crossing_loc(wolves[[16]], crs_code=32611, key='highway',value=c('primary','secondary'))
d
e <- hi_crossing_loc(wolves[[17]], crs_code=32611, key='highway',value=c('primary','secondary'))
e
rbind(a,b,d,e)
rm(list=ls())
library(sf)
#library(sp)
library(move)
library(osmdata)
library(mapview)
library(devtools)
library(units)
library(dplyr)
#devtools::install_github('jedalong/wildlifeHI')
#library(wildlifeHI)
devtools::load_all('D:/RPackages/wildlifeHI/wildlifeHI/')
# data("fishers")
# # Save an object to a file
# saveRDS(fishers, file = "D://RPackages/MoveApps/hi_nearest_distance/data/raw/fishers.rds")
#Full Fishers dataset
#fishers <- move("D:/RPackages/wildlifeHI/Martes pennanti LaPoint New York.csv")
# saveRDS(fishers, file = "D://RPackages/MoveApps/hi_nearest_distance/data/raw/fishers.rds")
# #Hebblewhite Alberta-BC Wolves (Movebank ID 209824313)
wolves <- move("D:/RPackages/wildlifeHI/Hebblewhite Alberta-BC Wolves.csv")
# #wolves <- wolves[[1:14]]   #use only B*** individuals
#
road_sf <- hi_by_trackId(wolves[[12:17]],fun="hi_crossing_loc",crs_code=32611,
key='highway',value=c('primary','secondary'))
e <- hi_crossing_loc(wolves[[13]], crs_code=32611, key='highway',value=c('primary','secondary'))
e
rm(list=ls())
library(sf)
#library(sp)
library(move)
library(osmdata)
library(mapview)
library(devtools)
library(units)
library(dplyr)
#devtools::install_github('jedalong/wildlifeHI')
#library(wildlifeHI)
devtools::load_all('D:/RPackages/wildlifeHI/wildlifeHI/')
# data("fishers")
# # Save an object to a file
# saveRDS(fishers, file = "D://RPackages/MoveApps/hi_nearest_distance/data/raw/fishers.rds")
#Full Fishers dataset
#fishers <- move("D:/RPackages/wildlifeHI/Martes pennanti LaPoint New York.csv")
# saveRDS(fishers, file = "D://RPackages/MoveApps/hi_nearest_distance/data/raw/fishers.rds")
# #Hebblewhite Alberta-BC Wolves (Movebank ID 209824313)
wolves <- move("D:/RPackages/wildlifeHI/Hebblewhite Alberta-BC Wolves.csv")
# #wolves <- wolves[[1:14]]   #use only B*** individuals
# sav
road_sf <- hi_by_trackId(wolves[[12:17]],fun="hi_crossing_loc",crs_code=32611,
key='highway',value=c('primary','secondary'))
rm(list=ls())
library(sf)
#library(sp)
library(move)
library(osmdata)
library(mapview)
library(devtools)
library(units)
library(dplyr)
#devtools::install_github('jedalong/wildlifeHI')
#library(wildlifeHI)
devtools::load_all('D:/RPackages/wildlifeHI/wildlifeHI/')
# data("fishers")
# # Save an object to a file
# saveRDS(fishers, file = "D://RPackages/MoveApps/hi_nearest_distance/data/raw/fishers.rds")
#Full Fishers dataset
#fishers <- move("D:/RPackages/wildlifeHI/Martes pennanti LaPoint New York.csv")
# saveRDS(fishers, file = "D://RPackages/MoveApps/hi_nearest_distance/data/raw/fishers.rds")
# #Hebblewhite Alberta-BC Wolves (Movebank ID 209824313)
wolves <- move("D:/RPackages/wildlifeHI/Hebblewhite Alberta-BC Wolves.csv")
# #wolves <- wolves[[1:14]]   #use only B*** individuals
# saveRDS(wolves, file = "D://RPackages/MoveApps/hi_nearest_distance/data/raw/wolves.rds")
#
road_sf <- hi_by_trackId(wolves[[12:17]],fun="hi_crossing_loc",crs_code=32611,
key='highway',value=c('primary','secondary'))
View(road_sf)
d <- hi_crossing_loc(wolves[[17]], crs_code=32611, key='highway',value=c('primary','secondary'))
d
rbind(e,a,b,d)
e <- hi_crossing_loc(wolves[[13]], crs_code=32611, key='highway',value=c('primary','secondary'))
rbind(e,a,b,d)
g <- hi_crossing_loc(wolves[[12]], crs_code=32611, key='highway',value=c('primary','secondary'))
e <- hi_crossing_loc(wolves[[13]], crs_code=32611, key='highway',value=c('primary','secondary'))
a <- hi_crossing_loc(wolves[[14]], crs_code=32611, key='highway',value=c('primary','secondary'))
b <- hi_crossing_loc(wolves[[15]], crs_code=32611, key='highway',value=c('primary','secondary'))
d <- hi_crossing_loc(wolves[[17]], crs_code=32611, key='highway',value=c('primary','secondary'))
f <- hi_crossing_loc(wolves[[16]], crs_code=32611, key='highway',value=c('primary','secondary'))
rbind(a,b,d,e,f,g,)
rbind(a,b,d,e,f,g)
mapview(road_sf['trackId'])
aa <- rbind(a,b)
aa <- rbind(aa,d)
aa <- rbind(aa,e)
aa <- rbind(aa,f)
aa <- rbind(aa,g)
road_sf <- hi_by_trackId(wolves,fun="hi_crossing_loc",crs_code=32611,
key='highway',value=c('primary','secondary'))
warnings()
View(road_sf)
mapview(road_sf['trackId'])
str(road_sf)
st_crs(road_sf)
st_bbox(road_sf)
wolves_buf <- hi_by_trackId(wolves,fun='hi_buffer',r = 50, crs_code=32611,
key='highway',value=c('primary','secondary'))
f <- hi_buffer(wolves[[1]], crs_code=32611, r = 50,
key='highway',value=c('primary','secondary'))
move <- wolves[[1]]
tz <- attr(timestamps(move),'tzone')
#check input data type
if (class(move) != 'MoveStack'){
if (class(move) == 'Move'){
move <- moveStack(move, forceTz=tz) #fix this timestamp to correct time zone
} else {
print('Input Data not of class MoveStack. Returning NULL.')
return(NULL)
}
}
#save original CRS
data_crs <- st_crs(move)
osmdata <- hi_get_osm(move,key='highway',value=c('primary','secondary'))
crs_code = 32611
osmdata <- st_transform(osmdata,crs=crs_code)
#Create buffer
buf <- st_buffer(osmdata,r) |>
st_union()
r = 50
#Create buffer
buf <- st_buffer(osmdata,r) |>
st_union()
mapview(buf)
# Create linestrings need to fix to do by ID
sf_ln <- internal_hi_move2line(move) |>
st_transform(crs=crs_code)
## There is something about ordering that really matters in terms of these functions:
## https://github.com/r-spatial/sf/issues/1261
#with <- st_within(sf_ln,buf,sparse=FALSE) #THIS IS SLOW!!
with <- st_contains(buf,sf_ln,sparse=FALSE)
#into <- st_intersects(sf_ln,buf,sparse=FALSE) #This is slow also
into <- st_intersects(buf,sf_ln,sparse=FALSE)
wiht
with
into
buf_code <- rep(NA,nrow(sf_ln))
buf_code[into] <- 'intersects'
buf_code[with] <- 'within'
i_int <- which(buf_code == 'intersects')
suppressWarnings(ln_pt <- st_cast(sf_ln[i_int,],'POINT'))
pt_int <- st_intersects(buf,ln_pt,sparse=FALSE)
pt_int
ln_pt
i_int
into
sum(into)
sum(with)
#into <- st_intersects(sf_ln,buf,sparse=FALSE) #This is slow also
into <- st_intersects(sf_ln,buf,sparse=FALSE)
into
sum(into)
mapview(sf_ln) + mapview(buf)
rm(list=ls())
library(sf)
#library(sp)
library(move)
library(osmdata)
library(mapview)
library(devtools)
library(units)
library(dplyr)
#devtools::install_github('jedalong/wildlifeHI')
#library(wildlifeHI)
devtools::load_all('D:/RPackages/wildlifeHI/wildlifeHI/')
# data("fishers")
# # Save an object to a file
# saveRDS(fishers, file = "D://RPackages/MoveApps/hi_nearest_distance/data/raw/fishers.rds")
#Full Fishers dataset
#fishers <- move("D:/RPackages/wildlifeHI/Martes pennanti LaPoint New York.csv")
# saveRDS(fishers, file = "D://RPackages/MoveApps/hi_nearest_distance/data/raw/fishers.rds")
# #Hebblewhite Alberta-BC Wolves (Movebank ID 209824313)
wolves <- move("D:/RPackages/wildlifeHI/Hebblewhite Alberta-BC Wolves.csv")
# #wolves <- wolves[[1:14]]   #use only B*** individuals
# saveRDS(wolves, file = "D://RPackages/MoveApps/hi_nearest_distance/data/raw/wolves.rds")
#
f <- hi_buffer(wolves[[1]], crs_code=32611, r = 50,
key='highway',value=c('primary','secondary'))
f
wolves_buf <- hi_by_trackId(wolves,fun='hi_buffer',r = 100, crs_code=32611,
key='highway',value=c('primary','secondary'))
table(trackId(wolevs_buf),wolves_buf$buf_code)
table(trackId(wolves_buf),wolves_buf$buf_code)
library(raster)
r1 <- raster('D:/MapComparison/sing whales.tif')
r1 <- raster('D:/MapComparison/singlewhales.tif')
plot(r1)
r1 <- raster('D:/MapComparison/shapefiles/single2nm.tif')
plot(r1)
r2 <- raster('D:/MapComparison/shapefiles/groups2nm.tif')
plotr2
plot(r2)
#CREATE README FILE for GITHUB
# Make sure the working directory is in the package
setwd('D:/RPackages/wildlifeHI/wildlifeHI/')
# EDIT README FILE TO HEARTS CONTENT
knitr::knit(input="README.rmd", output = "README.md")
#update documentation
devtools::document()
#Check Spelling
devtools::spell_check()
# EDIT README FILE TO HEARTS CONTENT
knitr::knit(input="README.rmd", output = "README.md")
#update documentation
devtools::document()
#Check Spelling
devtools::spell_check()
# EDIT README FILE TO HEARTS CONTENT
knitr::knit(input="README.rmd", output = "README.md")
#update documentation
devtools::document()
#Check Spelling
devtools::spell_check()
devtools::build()
#test on Local machine using devtools
devtools::release_checks()
devtools::check()
devtools::build()
#test on Local machine using devtools
devtools::release_checks()
devtools::check()
?devtools::use_build_ignore
?inherits
?group_by
library(move)
data(fishers)
inherits(fishers,'MoveStack')
inherits(fishers,'Move')
a <- fishers[[1]]
inherits(fishers,'Move')
inherits(fishers,'MoveStack')
!inherits(fishers,'MoveStack')
?subset
df <- data.frame(fishers)
df
df2 <- subset(df, select = -"timestamp")
df2 <- subset(df, select = -c("timestamp"))
df2 <- df[,-"timestamp"]
df2 <- df[,-c("timestamp")]
#update documentation
devtools::document()
#update documentation
devtools::document()
#Check Spelling
devtools::spell_check()
devtools::build()
#test on Local machine using devtools
devtools::release_checks()
devtools::check()
#If more files need to be ignored use:
devtools::use_build_ignore()
#If more files need to be ignored use:
usethis::use_build_ignore()
?use_build_ignore
#If more files need to be ignored use:
usethis::use_build_ignore("[.].png$",escape=FALSE)
usethis::use_build_ignore("[.].Rmd$",escape=FALSE)
?.data
?.data
#update documentation
devtools::document()
#Check Spelling
devtools::spell_check()
devtools::build()
#test on Local machine using devtools
devtools::release_checks()
devtools::check()
df
df2 <- df[,'utm.zone']
df2
df2 <- df[,-'utm.zone']
devtools::build()
#test on Local machine using devtools
devtools::release_checks()
devtools::check()
df2 <- df |>
select(-.data$timestamps) |>
select(-.data$utm.zone)
df2 <- df |>
+ dplyr::select(-.data$timestamps) |>
+ dplyr::select(-.data$utm.zone)
df2 <- df |>
dplyr::select(-.data$timestamps) |>
dplyr::select(-.data$utm.zone)
df2 <- df |>
dplyr::select(-"timestamps") |>
dplyr::select(-"utm.zone")
head(df)
df2 <- df |>
dplyr::select(-"timestamp") |>
dplyr::select(-"utm.zone")
df2
df |> group_by("eobs.status") |> summarize()
df |> dplyr::group_by("eobs.status") |> dplyr::summarize()
summary(df)
df |> dplyr::group_by("utm.zone") |> dplyr::summarize(m=mean(utm.northing))
df |> dplyr::group_by(.data$utm.zone) |> dplyr::summarize(m=mean(utm.northing))
#update documentation
devtools::document()
#Check Spelling
devtools::spell_check()
devtools::build()
#test on Local machine using devtools
devtools::release_checks()
devtools::check()
devtools::build()
devtools::check()
#Check windows release version
devtools::check_win_release()
devtools::check()
devtools::check()
#Testing building on Rhub (windows server and two Linux versions)
devtools::check_rhub()
#Testing building on Rhub (windows server and two Linux versions)
devtools::check_rhub()
devtools::build()
#test on Local machine using devtools
devtools::release_checks()
devtools::check()
#test on Local machine using devtools
devtools::release_checks()
devtools::check()
#Testing building on Rhub (windows server and two Linux versions)
devtools::check_rhub()
#update documentation
devtools::document()
devtools::build()
#Check windows release version
devtools::check_win_release()
devtools::check_mac_release()
#test building on win-builder development version
devtools::check_win_devel()
##################
## input/output ## adjust!
##################
## Provided testing datasets in `./data/raw`:
## for own data: file saved as a .rds containing a object of class MoveStack
inputFileName = "./data/raw/wolves.rds"
## optionally change the output file name
unlink("./data/output/", recursive = TRUE) # delete "output" folder if it exists, to have a clean start for every run
dir.create("./data/output/") # create a new output folder
outputFileName = "./data/output/output.rds"
##########################
## Arguments/parameters ## adjust!
##########################
# There is no need to define the parameter "data", as the input data will be automatically assigned to it.
# The name of the field in the vector must be exactly the same as in the r function signature
# Example:
# rFunction = function(data, username, department)
# The parameter must look like:
#    args[["username"]] = "my_username"
#    args[["department"]] = "my_department"
args <- list() # if your function has no arguments, this line still needs to be active
# Add all your arguments of your r-function here
args[["key"]] = "highway"
args[["value"]] = "primary"
args[["geom"]] = "line"
args[["crs_code"]] = 32618
##############################
## source, setup & simulate ## leave as is!
##############################
# this file is the home of your app code and will be bundled into the final app on MoveApps
source("RFunction.R")
