b <- st_cast(a, "LINESTRING")
head(b)
b$building
opq
library(sf)
library(sp)
library(move)
library(osmdata)
library(mapview)
library(dplyr)
data("fishers")
fishers[1]
plot(fishers[1])
hi_get_osm <- function(move,key='highway',value,bbox,geom="line",poly2line=TRUE){
if (missing(bbox)){
bbox <- st_bbox(move)
x10 <- (bbox$xmax - bbox$xmin)*0.1
y10 <- (bbox$ymax - bbox$ymin)*0.1
bbox <- bbox + c(-x10,-y10,x10,y10)
}
if (missing(value)){
osmdata <- bbox %>%
opq()%>%
add_osm_feature(key = key) %>%
osmdata_sf()
} else {
osmdata <- bbox %>%
opq()%>%
add_osm_feature(key = key,value=value) %>%
osmdata_sf()
}
osm_sf <- NULL
if ('point' %in% geom) {
temp_pt <- osmdata$osm_points
temp_pt$key <- key
temp_pt$value <- st_drop_geometry(temp_pt)[,key]
osm_sf <- rbind(osm_sf,temp_pt[,c('osm_id','name','key','value')])
}
if ('line' %in% geom) {
temp_ln1 <- osmdata$osm_lines
temp_ln2 <- osmdata$osm_multilines %>% st_cast('LINESTRING')
temp_ln <- rbind(temp_ln1,temp_ln2)
temp_ln$key <- key
temp_ln$value <- st_drop_geometry(temp_ln)[,key]
osm_sf <- rbind(osm_sf,temp_ln[,c('osm_id','name','key','value')])
}
if ('polygon' %in% geom) {
temp_po1 <- osmdata$osm_polygons
temp_po2 <- osmdata$osm_multipolygons %>% st_cast('POLYGON')
temp_po <- rbind(temp_po1,temp_po2)
temp_po$key <- key
temp_po$value <- st_drop_geometry(temp_po)[,key]
if (poly2line) {
temp_po <- st_cast(temp_po,"LINESTRING")
}
osm_sf<- rbind(osm_sf, temp_po[,c('osm_id','name','key','value')])
}
return(osm_sf)
}
osmdata <- hi_get_osm(fishers)
fishers
osmdata <- hi_get_osm(fishers)
hi_get_osm <- function(move,key='highway',value,bbox,geom="line",poly2line=TRUE){
if (missing(bbox)){
bbox <- st_bbox(move)
x10 <- (bbox$xmax - bbox$xmin)*0.1
y10 <- (bbox$ymax - bbox$ymin)*0.1
bbox <- bbox + c(-x10,-y10,x10,y10)
}
if (missing(value)){
osmdata <- bbox %>%
opq()%>%
add_osm_feature(key = key) %>%
osmdata_sf()
} else {
osmdata <- bbox %>%
opq()%>%
add_osm_feature(key = key,value=value) %>%
osmdata_sf()
}
osm_sf <- NULL
if ('point' %in% geom) {
temp_pt <- osmdata$osm_points
temp_pt$key <- key
temp_pt$value <- st_drop_geometry(temp_pt)[,key]
osm_sf <- rbind(osm_sf,temp_pt[,c('osm_id','name','key','value')])
}
if ('line' %in% geom) {
temp_ln <- osmdata$osm_lines
if (!is.null(osmdata$osm_multilines)){
temp_ln2 <- osmdata$osm_multilines %>% st_cast('LINESTRING')
temp_ln <- rbind(temp_ln,temp_ln2)
}
temp_ln$key <- key
temp_ln$value <- st_drop_geometry(temp_ln)[,key]
osm_sf <- rbind(osm_sf,temp_ln[,c('osm_id','name','key','value')])
}
if ('polygon' %in% geom) {
temp_po <- osmdata$osm_polygons
if (!is.null(osmdata$osm_multipolygons)){
temp_po2 <- osmdata$osm_multipolygons %>% st_cast('POLYGON')
temp_po <- rbind(temp_po,temp_po2)
}
temp_po$key <- key
temp_po$value <- st_drop_geometry(temp_po)[,key]
if (poly2line) {
temp_po <- st_cast(temp_po,"LINESTRING")
}
osm_sf<- rbind(osm_sf, temp_po[,c('osm_id','name','key','value')])
}
return(osm_sf)
}
osmdata <- hi_get_osm(fishers)
osmdata <- hi_get_osm(fishers)
mapview(osmdata['value'])
osmdata_railway <- hi_get_osm(fishers,key='railway')
mapview(osmdata_railway['value'])
hi_distance <- function(move,osmdata,return='move',...){
if (missing(osmdata)){
osmdata <- hi_get_osm(move, ...)
}
sf_pt <- st_as_sf(move)
sf_pt$trackId <- move@trackId
#distance to features
nearest <- st_nearest_feature(sf_pt, osmdata)
#AASSUME 'OSM-like' data with columns named "key" and "value"
if (return == 'move'){
move$nearest_key <- st_drop_geometry(osmdata)[nearest,'key']
move$nearest_value <- st_drop_geometry(osmdata)[nearest,'value']
move$nearest_distance <- st_distance(sf_pt,osmdata[nearest,],by_element=TRUE)
return(move)
} else {
sf_pt$nearest_key <- st_drop_geometry(osmdata)[nearest,'key']
sf_pt$nearest_value <- st_drop_geometry(osmdata)[nearest,'value']
sf_pt$nearest_distance <- st_distance(sf_pt,osmdata[nearest,],by_element=TRUE)
return(sf_pt)
}
}
move2 <- hi_distance(fishers)
boxplot(nearest_distance ~ nearest_value, move2)
move3 <- hi_distance(fishers,osmdata_railway)
boxplot(nearest_distance ~ nearest_value, move3)
move4 <- hi_distance(fishers,key='building',geom='polygon')
osmdata2 <- hi_get_osm(fishers,key='building',geom='polygon')
move <- fishers
bbox <- st_bbox(move)
x10 <- (bbox$xmax - bbox$xmin)*0.1
y10 <- (bbox$ymax - bbox$ymin)*0.1
bbox <- bbox + c(-x10,-y10,x10,y10)
key = 'building'
osmdata <- bbox %>%
opq()%>%
add_osm_feature(key = key) %>%
osmdata_sf()
osm_sf <- NULL
temp_po <- osmdata$osm_polygons
if (!is.null(osmdata$osm_multipolygons)){
temp_po2 <- osmdata$osm_multipolygons %>% st_cast('POLYGON')
temp_po <- rbind(temp_po,temp_po2)
}
temp_po <- osmdata$osm_polygons
temp_po2 <- osmdata$osm_multipolygons %>% st_cast('POLYGON')
View(temp_po)
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_get_osm.R')
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_distance.R')
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_crossing.R')
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_crossing_loc.R')
data("fishers")
fishers[1]
plot(fishers[1])
osmdata <- hi_get_osm(fishers)
mapview(osmdata['value'])
crossings <- hi_crossing_loc(fishers,crs_code=32618)
system.time(hi_crossing_loc(fishers))
## system.time(hi_crossing_loc(fishers))  #2270 Seconds !!!
system.time(hi_crossing_loc(fishers,crs_code=32618))
crossings <- hi_crossing_loc(fishers,crs_code=32618)
mapview(crossings['highway'])
mapview(crossings['value'])
x2 <- hi_crossing_loc(fishers,crs_code=32618)  ## takes 12 seconds
plot(x2['value'])
buf <- hi_buffer(fishers,r=100,crs_code=32618,return='buffer')
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_buffer.R')
buf <- hi_buffer(fishers,r=100,crs_code=32618,return='buffer')
ln <- hi_buffer(fishers,r=100,crs_code=32618,return='line')
plot(buf)
plot(ln['buf_code'],add=TRUE)
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_get_osm.R')
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_distance.R')
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_crossing.R')
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_crossing_loc.R')
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_buffer.R')
data("fishers")
fishers[1]
plot(fishers[1])
osmdata <- hi_get_osm(fishers)
mapview(osmdata['value'])
osmdata_railway <- hi_get_osm(fishers,key='railway')
mapview(osmdata_railway['value'])
move2 <- hi_distance(fishers)
boxplot(nearest_distance ~ nearest_value, move2)
move3 <- hi_distance(fishers,osmdata_railway)
boxplot(nearest_distance ~ nearest_value, move3)
move4 <- hi_distance(fishers,key='building',geom='polygon')
boxplot(nearest_distance ~ nearest_value, move4)
move3 <- hi_crossing(fishers)
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_get_osm.R')
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_distance.R')
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_crossing.R')
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_crossing_loc.R')
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_buffer.R')
move4 <- hi_distance(fishers,key='building',geom='polygon')
boxplot(nearest_distance ~ nearest_value, move4)
move3 <- hi_crossing(fishers)
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_crossing.R')
move3 <- hi_crossing(fishers)
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_crossing.R')
move3 <- hi_crossing(fishers)
table(move3$crossing_value)
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_crossing.R')
move3 <- hi_crossing(fishers)
table(move3$crossing_value)
crossings <- hi_crossing_loc(fishers,crs_code=32618)
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_crossing_loc.R')
crossings <- hi_crossing_loc(fishers,crs_code=32618)
crossings <- hi_crossing_loc(fishers,crs_code=32618)
osmdata <- hi_get_osm(move, ...)
key <- names(osmdata)[3]
sf_pt <- st_as_sf(move)
sf_pt$trackId <- move@trackId
data_crs <- st_crs(move)
osmdata <- st_transform(osmdata,crs=crs_code)
crs_code = 32618
osmdata <- st_transform(osmdata,crs=crs_code)
sf_pt <- st_transform(sf_pt,crs=crs_code)
# Create linestrings need to fix to do by ID
n <- nrow(sf_pt)
sf_p1 <- sf_pt[1:(n-1),]
sf_p2 <- sf_pt[2:n,]
id_df <- data.frame(trackId=sf_p1$trackId,
trackId2=sf_p2$trackId,
timestamp1=sf_p1$timestamp,
timestamp2=sf_p2$timestamp)
suppressWarnings({
sf_ln <- st_sfc(mapply(
function(a,b){st_cast(st_union(a,b),'LINESTRING')}
,sf_p1$geometry,sf_p2$geometry,SIMPLIFY=FALSE),crs=crs_code) %>%
st_sfc()
})
sf_ln <- st_sf(id_df,sf_ln)
#Remove line segments between individuals
ind <- which(sf_ln$trackId != sf_ln$trackId2)
sf_ln <- sf_ln[-ind,]
sf_ln <- sf_ln %>% select(-trackId2)
#get locations of crossings (lines/poly boundaries)
suppressWarnings(sf_int <- st_intersection(sf_ln,osmdata))
sf_int <- st_transform(sf_int,data_crs)
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_crossing_loc.R')
crossings <- hi_crossing_loc(fishers,crs_code=32618)
mapview(crossings['value'])
crossings$tod <- as.numeric(strftime(crossings$timestamp1, format="%H"))
mapview(crossings['tod'])
hist(crossings$tod)
buf <- hi_buffer(fishers,r=100,crs_code=32618,return='buffer')
ln <- hi_buffer(fishers,r=100,crs_code=32618,return='line')
plot(buf)
plot(ln['buf_code'],add=TRUE)
mapview(buf) + mapview(ln['buf_code'])
buf <- hi_buffer(fishers,r=50,crs_code=32618,return='buffer')
ln <- hi_buffer(fishers,r=50,crs_code=32618,return='line')
plot(buf)
plot(ln['buf_code'],add=TRUE)
mapview(buf) + mapview(ln['buf_code'])
library(sf)
#library(sp)
library(move)
library(osmdata)
library(mapview)
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_get_osm.R')
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_distance.R')
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_crossing.R')
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_crossing_loc.R')
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_buffer.R')
data("fishers")
fishers[1]
plot(fishers[1])
osmdata <- hi_get_osm(fishers)
mapview(osmdata['value'])
osmdata_railway <- hi_get_osm(fishers,key='railway')
mapview(osmdata_railway['value'])
move2 <- hi_distance(fishers)
boxplot(nearest_distance ~ nearest_value, move2)
move3 <- hi_distance(fishers,osmdata_railway)
boxplot(nearest_distance ~ nearest_value, move3)
move4 <- hi_distance(fishers,key='building',geom='polygon')
boxplot(nearest_distance ~ nearest_value, move4)
move3 <- hi_crossing(fishers)
library(dplyr)
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_crossing.R')
move3 <- hi_crossing(fishers)
table(move3$crossing_value)
crossings <- hi_crossing_loc(fishers,crs_code=32618)
mapview(crossings['value'])
crossings$tod <- as.numeric(strftime(crossings$timestamp1, format="%H"))
mapview(crossings['tod'])
buf <- hi_buffer(fishers,r=50,crs_code=32618,return='buffer')
ln <- hi_buffer(fishers,r=50,crs_code=32618,return='line')
plot(buf)
plot(ln['buf_code'],add=TRUE)
mapview(buf) + mapview(ln['buf_code'])
library(devtools)
#CREATE README FILE for GITHUB
# Make sure the working directory is in the package
setwd('D:/RPackages/wildlifeHI/wildlifeHI/')
devtools::build()
devtools::check()
#update documentation
devtools::document()
#update documentation
devtools::document()
rm(list = c("hi_buffer", "hi_crossing", "hi_crossing_loc", "hi_distance", "hi_get_osm"))
#update documentation
devtools::document()
library(sf)
#library(sp)
library(move)
library(osmdata)
library(mapview)
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_get_osm.R')
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_distance.R')
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_crossing.R')
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_crossing_loc.R')
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_buffer.R')
data("fishers")
fishers[1]
plot(fishers[1])
osmdata <- hi_get_osm(fishers)
mapview(osmdata['value'])
osmdata_railway <- hi_get_osm(fishers,key='railway')
mapview(osmdata_railway['value'])
move2 <- hi_distance(fishers)
boxplot(nearest_distance ~ nearest_value, move2)
move3 <- hi_distance(fishers,osmdata_railway)
boxplot(nearest_distance ~ nearest_value, move3)
move4 <- hi_distance(fishers,key='building',geom='polygon')
boxplot(nearest_distance ~ nearest_value, move4)
move3 <- hi_crossing(fishers)
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_crossing.R')
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_crossing.R')
move3 <- hi_crossing(fishers)
a <- data.frame(a=1:10,b=11:20,c=31:40)
ind <- 5
a = a[-ind,-c(b)]
a = a[-ind,-c('b')]
a = a[-ind,-'b']
a = a[-ind,-b]
a = a[-ind,]
a = a[-b]
a = a[-'b']
a = a[-c('b')]
a = subset(a,select=-a)
a
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_get_osm.R')
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_distance.R')
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_crossing.R')
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_crossing_loc.R')
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_buffer.R')
move3 <- hi_crossing(fishers)
source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_crossing.R')
move3 <- hi_crossing(fishers)
table(move3$crossing_value)
crossings <- hi_crossing_loc(fishers,crs_code=32618)
mapview(crossings['value'])
crossings$tod <- as.numeric(strftime(crossings$timestamp1, format="%H"))
mapview(crossings['tod'])
buf <- hi_buffer(fishers,r=50,crs_code=32618,return='buffer')
ln <- hi_buffer(fishers,r=50,crs_code=32618,return='line')
plot(buf)
plot(ln['buf_code'],add=TRUE)
mapview(buf) + mapview(ln['buf_code'])
?st_is_longlat
st_is_longlat(ln)
st_is_longlat(osmdata)
st_is_longlat(osmdata_railway)
#update documentation
devtools::document()
rm(list = c("hi_buffer", "hi_crossing", "hi_crossing_loc", "hi_distance", "hi_get_osm"))
#update documentation
devtools::document()
devtools::build()
devtools::install_github('jedalong/wildlifeHI')
key = 'highway'
geom=c('line','polygon')
poly2line=TRUE
move_dist <- hi_distance(data,key=key,value=value,geom=geom,poly2line=poly2line)
?hi_distance
move_dist <- hi_distance(data,key=key,value=value,geom=geom,poly2line=poly2line)
data <- fishers
move_dist <- hi_distance(move=data,key=key,value=value,geom=geom,poly2line=poly2line)
move_dist <- hi_distance(move=data,key=key,geom=geom,poly2line=poly2line)
head(move_dist)
move_dist@trackId
temp <- move_dist
temp$trackId <- move_dist@trackId
boxplot(nearest_distance ~ nearest_value + trackId,temp)
move_dist$timestamp <- timestamps(move_dist)
move_dist$timestamp <- timestamps(move_dist)
move_dist$trackId <- trackId(move_dist)
ggplot(move_dist,aes(x=timestamp,y=nearest_distance,group=trackId)) +
geom_line()
library('ggplot2')
ggplot(move_dist,aes(x=timestamp,y=nearest_distance,group=trackId)) +
geom_line()
move_df <- data.frame(move_dist)
move_df <- data.frame(move_dist)
move_df$timestamp <- timestamps(move_dist)
move_df$trackId <- trackId(move_dist)
ggplot(move_df,aes(x=timestamp,y=nearest_distance,group=trackId)) +
geom_line()
library('units')
ggplot(move_df,aes(x=timestamp,y=nearest_distance,group=trackId)) +
geom_line()
r = 50
ggplot(move_df,aes(x=timestamp,y=nearest_distance,group=trackId)) +
geom_line() +
geom_abline(h=r)
ggplot(move_df,aes(x=timestamp,y=nearest_distance,group=trackId)) +
geom_line() +
geom_abline(h=r)
ggplot(move_df,aes(x=timestamp,y=nearest_distance,group=trackId)) +
geom_line(aes(color=trackId)) +
geom_abline(yintercept=r)
?geom_abline
ggplot(move_df,aes(x=timestamp,y=nearest_distance,group=trackId)) +
geom_line(aes(color=trackId)) +
geom_hline(yintercept=r)
ggplot(move_df,aes(x=timestamp,y=nearest_distance)) +
geom_line() +
geom_hline(yintercept=r) +
facet_wrap(~trackId)
ggplot(move_df,aes(x=timestamp,y=nearest_distance)) +
geom_line() +
geom_hline(yintercept=r) +
facet_wrap(~trackId, scales='free')
?facet_wrap
ggplot(move_df,aes(x=timestamp,y=nearest_distance)) +
geom_line() +
geom_hline(yintercept=r) +
facet_wrap(~trackId, scales='free_x')
ggplot(move_df,aes(x=timestamp,y=nearest_distance)) +
geom_line() +
geom_hline(yintercept=r,linetype=2,color='red') +
facet_wrap(~trackId, scales='free_x')
#Within Distance
sub_df <- subset(move_df,nearest_distance < r)
units(move_df$nearest_distance)
units(r) <- units(move_dist)
units(r) <- units(move_dist$nearest_distance)
units(r)
r
#Within Distance
sub_df <- subset(move_df,nearest_distance < r)
dtab <- table(sub_df$nearest_value,sub_df$trackId)
dtab
dtab <- table(sub_df$trackId,sub_df$nearest_value)
dtab
dtab <- table(sub_df$trackId,sub_df$nearest_value, sub_df$nearest_key)
dtab
data
csvName <- paste0('DistanceAnalysis_r_',r,'.csv')
csvName
#source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_get_osm.R')
#source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_distance.R')
#source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_crossing.R')
#source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_crossing_loc.R')
#source('D:/RPackages/wildlifeHI/wildlifeHI/R/hi_buffer.R')
data("fishers")
# Save an object to a file
saveRDS(fishers, file = "D://RPackages/MoveApps/hi_nearest_distance/data/fishers.rds")
##################
## input/output ## adjust!
##################
## Provided testing datasets in `./data/raw`:
## for own data: file saved as a .rds containing a object of class MoveStack
inputFileName = "./data/raw/fishers.rds"
## optionally change the output file name
unlink("./data/output/", recursive = TRUE) # delete "output" folder if it exists, to have a clean start for every run
dir.create("./data/output/") # create a new output folder
outputFileName = "./data/output/output.rds"
##########################
## Arguments/parameters ## adjust!
##########################
# There is no need to define the parameter "data", as the input data will be automatically assigned to it.
# The name of the field in the vector must be exactly the same as in the r function signature
# Example:
# rFunction = function(data, username, department)
# The parameter must look like:
#    args[["username"]] = "my_username"
#    args[["department"]] = "my_department"
args <- list() # if your function has no arguments, this line still needs to be active
# Add all your arguments of your r-function here
args[["r"]] = 50
args[["key"]] = "highway"
args[["value"]] = "all"
args[["geom"]] = "line"
args[["poly2line"]] = TRUE
##############################
## source, setup & simulate ## leave as is!
##############################
# this file is the home of your app code and will be bundled into the final app on MoveApps
source("RFunction.R")
getwd()
